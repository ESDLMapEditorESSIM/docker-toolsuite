version: "3.8"

volumes:
  # For backwards compatibility, use the "old" names.
  # You might get a warning that these are external volumes. This can be ignored. In case this gives an error in a
  # future version, add "external: true" to each volume.
  caddy_data:
    external: true 
  mongo_storage:
    name: "baseinfrastructure_mongo_storage"
    driver: local
  influxdb_storage:
    name: "baseinfrastructure_influxdb_storage"
    driver: local
  grafana_storage:
    name: "baseinfrastructure_grafana_storage"
    driver: local
  postgres_storage:
    name: "baseinfrastructure_postgres_storage"
    driver: local
  pgadmin_storage:
    name: "baseinfrastructure_pgadmin_storage"
    driver: local

networks:
  mapeditor-net:
    driver: bridge
    name: mapeditor-net

services:
  caddy:
    container_name: caddy
    image: caddy:latest
    ports:
      - 443:443 #HTTPS
      #- 80:80   #HTTP
    volumes:
      - caddy_data:/data
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
    network_mode: "host"
        
  mapeditor:
    container_name: mapeditor
    image: esdlmapeditoressim/esdl-mapeditor:latest
    # image: esdl-mapeditor:latest
    #profiles: ["mapeditor"]
    networks:
      - mapeditor-net
    ports:
      - "${MAPEDITOR_PORT:-8111}:8111"
    env_file:
      - ./mapeditor_open_source.env
    depends_on:
      influxdb:
        condition: service_healthy
      mongo:
        condition: service_healthy

  boundary-service:
    container_name: boundary-service
    image: esdlmapeditoressim/boundary-service:latest
    networks:
      - mapeditor-net
    ports:
      - "${BOUNDARYSERVICE_PORT:-4002}:4002"
    depends_on:
      postgres:
        condition: service_healthy

  panel-service:
    container_name: panel-service
    image: esdlmapeditoressim/panel-service:latest
    ports:
      - ${PANELSERVICE_PORT:-3400}:5000
    networks:
      - mapeditor-net
    environment:
      - ENV=dev
      - INTERNAL_GRAFANA_HOST=grafana
      - INTERNAL_GRAFANA_PORT=${GRAFANA_PORT:-3000}
      - EXTERNAL_GRAFANA_URL=${PROTOCOL:-http}://${GRAFANA_DOMAIN:-localhost:3000}
    env_file:
      - panel_service.env

  mongo:
    container_name: mongo
    image: mvertes/alpine-mongo
    volumes:
      - mongo_storage:/data/db
    ports:
      - "${MONGO_PORT:-27017}:27017"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo mongo:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - mapeditor-net

  influxdb:
    container_name: influxdb
    image: influxdb:1.7
    ports:
      - "${INFLUXDB_PORT:-8086}:8086"
      - "${INFLUXDB_RPC_PORT:-8088}:8088"
    environment:
      - INFLUXDB_ADMIN_USER=admin
      - INFLUXDB_ADMIN_PASSWORD=${INFLUXDB_ADMIN_PASSWORD:?error}
      - INFLUXDB_DB=panelservice
      - INFLUXDB_WRITE_USER=panelservice
      - INFLUXDB_WRITE_USER_PASSWORD=${INFLUXDB_WRITE_USER_PASSWORD:?error}
    volumes:
      - influxdb_storage:/var/lib/influxdb
    healthcheck:
      test: ["CMD", "curl", "-f", "http://influxdb:8086/ping"]
      interval: 10s
      timeout: 5s
    networks:
      - mapeditor-net

  grafana:
    container_name: grafana
    image: grafana/grafana:8.4.3
    volumes:
      - grafana_storage:/var/lib/grafana
    depends_on:
      influxdb:
        condition: service_healthy
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_API_KEY=true
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_SERVER_ROOT_URL=${PROTOCOL:-http}://${GRAFANA_DOMAIN:-localhost:${GRAFANA_PORT:-3000}}
      - GF_SECURITY_ALLOW_EMBEDDING=True
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:?error}
      - GF_PANELS_DISABLE_SANITIZE_HTML=true
      - GF_AUTH_DISABLE_LOGIN_FORM=True
      - GF_AUTH_BASIC_ENABLED=True
      - GF_AUTH_OAUTH_AUTO_LOGIN=True
      - GF_AUTH_GENERIC_OAUTH_ENABLED=True
      - GF_AUTH_GENERIC_OAUTH_ALLOW_SIGN_UP=True
      - GF_AUTH_GENERIC_OAUTH_NAME=Auth0
      - GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH=contains(grafana_role, 'Admin') && 'Admin' || contains(grafana_role, 'Editor') && 'Editor' || 'Viewer'
      - GF_AUTH_GENERIC_OAUTH_CLIENT_ID=essim-dashboard
      - GF_AUTH_GENERIC_OAUTH_SCOPES=openid profile email api_keys
      - GF_AUTH_GENERIC_OAUTH_GRANT_TYPE=password
      - GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET=174522fe-db1c-4384-a3c5-eaa6dc03329b
      - GF_AUTH_SIGNOUT_REDIRECT_URL=${PROTOCOL:-http}://${KEYCLOAK_DOMAIN:-localhost:8080}/auth/realms/esdl-mapeditor/protocol/openid-connect/logout?redirect_uri=${PROTOCOL:-http}://${GRAFANA_DOMAIN:-localhost:${GRAFANA_PORT:-3000}}
      - GF_AUTH_GENERIC_OAUTH_AUTH_URL=http://localhost:8080/auth/realms/esdl-mapeditor/protocol/openid-connect/auth
      - GF_AUTH_GENERIC_OAUTH_TOKEN_URL=http://keycloak:8080/auth/realms/esdl-mapeditor/protocol/openid-connect/token
      - GF_AUTH_GENERIC_OAUTH_API_URL=http://keycloak:8080/auth/realms/esdl-mapeditor/protocol/openid-connect/userinfo
    networks:
      - mapeditor-net

  postgres:
    container_name: postgres
    image: postgis/postgis:12-master
    restart: always
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_storage:/var/lib/postgresql/data
      - ./postgres/init-database.sh:/docker-entrypoint-initdb.d/init-database.sh
      - ./data/Boundaries:/data/boundaries
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?error}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 15s # Set to 15 seconds to prevent a "Connection refused" error from boundary-service trying to connect to postgres. If you receive this error from boundary-service you can try raising this value.
      timeout: 5s
    networks:
      - mapeditor-net

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@admin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:?error}
    volumes:
      - pgadmin_storage:/root/.pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    restart: unless-stopped
    networks:
      - mapeditor-net

  cdo-server:
    container_name: cdo-server
    image: esdlmapeditoressim/cdo-server:23.03 #22.06
    ports:
      - "${CDO_PORT:-2036}:2036"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - POSTGRESQL_HOST=postgres
      - POSTGRESQL_PORT=${POSTGRES_PORT:-5432}
      - POSTGRESQL_USER=drive
      - POSTGRESQL_PASSWORD=${POSTGRES_DRIVE_PASSWORD:?error}
      - POSTGRESQL_DATABASE=esdlrepo
      #- AUTO_MIGRATE=1
    networks:
      - mapeditor-net

  esdl-drive:
    container_name: esdl-drive
    image: esdlmapeditoressim/esdl-drive:23.03 #22.07
    ports:
      - ${ESDL_DRIVE_PORT:-9080}:9080
      - ${ESDL_DRIVE_HTTPS_PORT:-9443}:9443
    depends_on:
      - cdo-server
    links:
      - cdo-server
    environment:
      - CDO_SERVER_HOST=cdo-server:2036
      - KEYCLOAK_REALM=http://keycloak:8080/auth/realms/esdl-mapeditor
      - KEYCLOAK_REALM_EXTERNAL=${PROTOCOL:-http}://${KEYCLOAK_DOMAIN:-localhost:8080}/auth/realms/esdl-mapeditor
    networks:
      - mapeditor-net

  essim-engine:
    container_name: essim-engine
    image: esdlmapeditoressim/essim:35f7318
    ports:
      - ${ESSIM_PORT:-8112}:8112
    environment:
      - HTTP_SERVER_SCHEME=http
      - HTTP_SERVER_HOSTNAME=0.0.0.0
      - HTTP_SERVER_PORT=${ESSIM_PORT:-8112}
      - HTTP_SERVER_PATH=essim
      - MONGODB_HOST=mongo
      - MONGODB_PORT=${MONGO_PORT:-27017}
      - GRAFANA_ADMIN_USER=admin
      - GRAFANA_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:?error}
      - GRAFANA_INTERNAL_URL=http://grafana:3000
      - GRAFANA_EXTERNAL_URL=${PROTOCOL:-http}://${GRAFANA_DOMAIN:-localhost:3000}
    networks:
      - mapeditor-net
    depends_on:
      - nats

  nats:
    container_name: nats
    image: esdlmapeditoressim/nats-server:latest
    ports:
      - 4222:4222
      - 8222:8222
      - 6222:6222
    networks:
      - mapeditor-net

  keycloak:
    container_name: keycloak
    image: jboss/keycloak:11.0.0
    restart: always
    environment:
      - DB_VENDOR=POSTGRES
      - DB_ADDR=postgres
      - DB_DATABASE=keycloak
      - DB_USER=keycloak
      - DB_SCHEMA=public
      - DB_PASSWORD=${POSTGRES_KEYCLOAK_PASSWORD:?error}
      - KEYCLOAK_USER=admin
      - KEYCLOAK_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD:?error}
      - PROXY_ADDRESS_FORWARDING=true
    ports:
      - "${KEYCLOAK_PORT:-8080}:8080"
      - "${KEYCLOAK_HTTPS_PORT:-8443}:8443"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - mapeditor-net
    volumes:
      - "./keycloak/realms:/tmp/config/"
    build:
      dockerfile: ./keycloak/Dockerfile
version: "3.8"

volumes:
  mongo_storage:
    driver: local
  influxdb_storage:
    driver: local
  grafana_storage:
    driver: local
  postgres_storage:
    driver: local
  pgadmin_storage:
    driver: local

networks:
  mapeditor-net:
    driver: bridge
    name: mapeditor-net

services:
  mongo:
    container_name: mongo
    image: mvertes/alpine-mongo
    volumes:
      - mongo_storage:/data/db
    ports:
      - "${MONGO_PORT:-27017}:27017"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo mongo:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - mapeditor-net

  influxdb:
    container_name: influxdb
    image: influxdb:1.7
    ports:
      - "${INFLUXDB_PORT:-8086}:8086"
      - "${INFLUXDB_RPC_PORT:-8088}:8088"
    environment:
      - INFLUXDB_ADMIN_USER=admin
      - INFLUXDB_ADMIN_PASSWORD=admin
      - INFLUXDB_DB=panelservice
      - INFLUXDB_WRITE_USER=panelservice
      - INFLUXDB_WRITE_USER_PASSWORD=panelservice
    healthcheck:
      test: ["CMD", "curl", "-f", "http://influxdb:8086/ping"]
      interval: 10s
      timeout: 5s
    volumes:
      - influxdb_storage:/var/lib/influxdb
    networks:
      - mapeditor-net

  grafana:
    container_name: grafana
    image: grafana/grafana:8.4.3
    volumes:
      - grafana_storage:/var/lib/grafana
    depends_on:
      influxdb:
        condition: service_healthy
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_SERVER_ROOT_URL=http://localhost:${GRAFANA_PORT:-3000}
      - GF_SECURITY_ALLOW_EMBEDDING=True
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_PANELS_DISABLE_SANITIZE_HTML=true
      - GF_AUTH_DISABLE_LOGIN_FORM=True
      - GF_AUTH_BASIC_ENABLED=True
      - GF_AUTH_OAUTH_AUTO_LOGIN=True
      - GF_AUTH_GENERIC_OAUTH_ENABLED=True
      - GF_AUTH_GENERIC_OAUTH_ALLOW_SIGN_UP=True
      - GF_AUTH_GENERIC_OAUTH_NAME=Auth0
      - GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH=contains(grafana_role, 'Admin') && 'Admin' || contains(grafana_role, 'Editor') && 'Editor' || 'Viewer'
      - GF_AUTH_SIGNOUT_REDIRECT_URL=http://localhost:8080/auth/realms/esdl-mapeditor/protocol/openid-connect/logout?redirect_uri=http://localhost:${GRAFANA_PORT:-3000}
      - GF_AUTH_GENERIC_OAUTH_CLIENT_ID=essim-dashboard
      - GF_AUTH_GENERIC_OAUTH_SCOPES=openid profile email
      - GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET=174522fe-db1c-4384-a3c5-eaa6dc03329b
      - GF_AUTH_GENERIC_OAUTH_AUTH_URL=http://localhost:8080/auth/realms/esdl-mapeditor/protocol/openid-connect/auth
      - GF_AUTH_GENERIC_OAUTH_TOKEN_URL=http://keycloak:8080/auth/realms/esdl-mapeditor/protocol/openid-connect/token
      - GF_AUTH_GENERIC_OAUTH_API_URL=http://keycloak:8080/auth/realms/esdl-mapeditor/protocol/openid-connect/userinfo
    networks:
      - mapeditor-net

  postgres:
    container_name: postgres
    image: postgis/postgis:12-master
    #restart: always
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_storage:/var/lib/postgresql/data
      - ./postgres/init-database.sh:/docker-entrypoint-initdb.d/init-database.sh
      - ../Data/Boundaries:/data/boundaries
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - POSTGRES_USER=${POSTGRES_DB_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_DB_PASSWD:-password}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 15s # Set to 15 seconds to prevent a "Connection refused" error from boundary-service trying to connect to postgres. If you receive this error from boundary-service you can try raising this value.
      timeout: 5s
    networks:
      - mapeditor-net

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@admin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
    volumes:
      - pgadmin_storage:/root/.pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    restart: unless-stopped
    networks:
      - mapeditor-net

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:25.0 
    #restart: always
    environment:
      - KC_DB=postgres
        #- KC_DB_URL="jdbc:postgresql://postgres:${POSTGRES_PORT:-5432}/keycloak"
      - KC_DB_URL_DATABASE=keycloak
      - KC_DB_URL_HOST=postgres
      - KC_DB_URL_PORT=${POSTGRES_PORT:-5432}
      - KC_DB_SCHEMA=public
      - KC_DB_USERNAME=keycloak
      - KC_DB_PASSWORD=${POSTGRES_KEYCLOAK_PASSWORD:?error}
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD:?error}
      - PROXY_ADDRESS_FORWARDING=true
      - KC_OVERRIDE=false
    command:
      - -Dkeycloak.migration.strategy=IGNORE_EXISTING
      - start-dev  # start (production with TLS) or start-dev for development (less strict security)
      - --health-enabled=true  # enable /health, /health/ready and /health/live endpoints
      - --http-relative-path=/auth   # for compatiblity with keycloak <17  
        #- --hostname-path=/auth
      - --hostname-strict=false    # for local dev testing between containern names and localhost
      - --hostname=localhost  # required for production servers
      - --hostname-debug=true
        #- --hostname-url=http://localhost:8080/
        #- --features="scripts" # for importing realms with js insite them
        #- --proxy=edge  # for external TLS termination by e.g. nginx
      - --import-realm  # import realm
    ports:
      - "${KEYCLOAK_PORT:-8080}:8080"
      - "${KEYCLOAK_HTTPS_PORT:-8443}:8443"
    depends_on:
      - postgres
    networks:
      - mapeditor-net
    volumes:
      - "./keycloak/:/opt/keycloak/data/import"
